{
  "quizzes": [
    {
      "title": "Node.js",
      "icon": "./assets/images/nodejs.svg",
      "questions": [
        {
          "id": 1,
          "question": "What is Node.js primarily used for?",
          "options": [
            "Frontend development",
            "Server-side development",
            "Mobile app development",
            "Database management"
          ],
          "answer": "Server-side development"
        },
        {
          "id": 2,
          "question": "Which of the following is NOT a core module in Node.js?",
          "options": ["fs", "http", "path", "express"],
          "answer": "express"
        },
        {
          "id": 3,
          "question": "How do you import a core module in Node.js?",
          "options": [
            "import module from 'module'",
            "const module = require('module');",
            "include module;",
            "using module;"
          ],
          "answer": "const module = require('module');"
        },
        {
          "id": 4,
          "question": "Which method is used to start a Node.js server?",
          "options": [
            "server.start()",
            "server.listen()",
            "server.run()",
            "server.create()"
          ],
          "answer": "server.listen()"
        },
        {
          "id": 5,
          "question": "What does the `fs` module in Node.js stand for?",
          "options": [
            "File Stream",
            "File System",
            "File Service",
            "File Storage"
          ],
          "answer": "File System"
        },
        {
          "id": 6,
          "question": "Which of the following is true about Node.js?",
          "options": [
            "It is single-threaded",
            "It uses an event-driven architecture",
            "It is non-blocking",
            "All of the above"
          ],
          "answer": "All of the above"
        },
        {
          "id": 7,
          "question": "What is the purpose of the `package.json` file in a Node.js project?",
          "options": [
            "To store application data",
            "To define the project's dependencies and scripts",
            "To configure the Node.js runtime",
            "To store environment variables"
          ],
          "answer": "To define the project's dependencies and scripts"
        },
        {
          "id": 8,
          "question": "Which command is used to install dependencies listed in `package.json`?",
          "options": ["npm install", "npm add", "npm init", "npm start"],
          "answer": "npm install"
        },
        {
          "id": 9,
          "question": "What is the default entry point file for a Node.js application?",
          "options": ["app.js", "main.js", "index.js", "server.js"],
          "answer": "index.js"
        },
        {
          "id": 10,
          "question": "Which of the following is used to handle asynchronous operations in Node.js?",
          "options": [
            "Promises",
            "Callbacks",
            "Async/Await",
            "All of the above"
          ],
          "answer": "All of the above"
        }
      ]
    },
    {
      "title": "TypeScript",
      "icon": "./assets/images/typescript.svg",
      "questions": [
        {
          "id": 1,
          "question": "What is TypeScript primarily used for?",
          "options": [
            "Backend development",
            "Adding static typing to JavaScript",
            "Database management",
            "Mobile app development"
          ],
          "answer": "Adding static typing to JavaScript"
        },
        {
          "id": 2,
          "question": "Which command is used to install TypeScript globally?",
          "options": [
            "npm install typescript",
            "npm install -g typescript",
            "npm add typescript",
            "npm install typescript --global"
          ],
          "answer": "npm install -g typescript"
        },
        {
          "id": 3,
          "question": "What file extension is used for TypeScript files?",
          "options": [".js", ".tsx", ".ts", ".jsx"],
          "answer": ".ts"
        },
        {
          "id": 4,
          "question": "Which keyword is used to define a variable with a specific type in TypeScript?",
          "options": ["let", "var", "type", "const"],
          "answer": "type"
        },
        {
          "id": 5,
          "question": "What is the purpose of the `interface` keyword in TypeScript?",
          "options": [
            "To define a class",
            "To define a function",
            "To define the shape of an object",
            "To define a variable"
          ],
          "answer": "To define the shape of an object"
        },
        {
          "id": 6,
          "question": "Which of the following is a valid TypeScript type?",
          "options": ["string", "number", "boolean", "All of the above"],
          "answer": "All of the above"
        },
        {
          "id": 7,
          "question": "How do you compile a TypeScript file to JavaScript?",
          "options": [
            "tsc filename.ts",
            "ts compile filename.ts",
            "typescript filename.ts",
            "compile filename.ts"
          ],
          "answer": "tsc filename.ts"
        },
        {
          "id": 8,
          "question": "What is the purpose of the `readonly` keyword in TypeScript?",
          "options": [
            "To make a variable immutable",
            "To make a property immutable",
            "To make a function immutable",
            "To make a class immutable"
          ],
          "answer": "To make a property immutable"
        },
        {
          "id": 9,
          "question": "Which of the following is true about TypeScript?",
          "options": [
            "It is a superset of JavaScript",
            "It adds static typing to JavaScript",
            "It compiles to plain JavaScript",
            "All of the above"
          ],
          "answer": "All of the above"
        },
        {
          "id": 10,
          "question": "What is the purpose of the `any` type in TypeScript?",
          "options": [
            "To define a variable that can hold any type of value",
            "To define a variable that can hold only numbers",
            "To define a variable that can hold only strings",
            "To define a variable that can hold only booleans"
          ],
          "answer": "To define a variable that can hold any type of value"
        }
      ]
    },
    {
      "title": "NextJS",
      "icon": "./assets/images/nextjs.svg",
      "questions": [
        {
          "id": 1,
          "question": "What is Next.js primarily used for?",
          "options": [
            "Backend development",
            "Mobile app development",
            "Server-side rendering and static site generation",
            "Database management"
          ],
          "answer": "Server-side rendering and static site generation"
        },
        {
          "id": 2,
          "question": "Which command is used to create a new Next.js project?",
          "options": [
            "npm create-next-app",
            "npx create-next-app",
            "npm init next-app",
            "npx init-next-app"
          ],
          "answer": "npx create-next-app"
        },
        {
          "id": 3,
          "question": "What is the default port for a Next.js development server?",
          "options": ["3000", "8080", "5000", "4000"],
          "answer": "3000"
        },
        {
          "id": 4,
          "question": "Which folder is used to create API routes in Next.js?",
          "options": ["pages/api", "src/api", "api/routes", "routes/api"],
          "answer": "pages/api"
        },
        {
          "id": 5,
          "question": "Which of the following is true about getServerSideProps?",
          "options": [
            "It runs only on the client side",
            "It runs at build time",
            "It runs on the server side on every request",
            "It is used for static site generation"
          ],
          "answer": "It runs on the server side on every request"
        },
        {
          "id": 6,
          "question": "What is the purpose of getStaticProps in Next.js?",
          "options": [
            "Fetch data at request time",
            "Fetch data at build time",
            "Handle client-side routing",
            "Manage state in components"
          ],
          "answer": "Fetch data at build time"
        },
        {
          "id": 7,
          "question": "How do you create a dynamic route in Next.js?",
          "options": [
            "By adding a [param].js file in the pages folder",
            "By using a dynamic keyword in the file name",
            "By creating a routes folder",
            "By using a special next-dynamic package"
          ],
          "answer": "By adding a [param].js file in the pages folder"
        },
        {
          "id": 8,
          "question": "What is the purpose of the next/link component?",
          "options": [
            "To style links",
            "To handle external links",
            "To enable client-side navigation between pages",
            "To create API endpoints"
          ],
          "answer": "To enable client-side navigation between pages"
        },
        {
          "id": 9,
          "question": " Which of the following is NOT a feature of Next.js?",
          "options": [
            "Server-side rendering",
            "Static site generation",
            "Built-in state management",
            "API routes"
          ],
          "answer": "Built-in state management"
        },
        {
          "id": 10,
          "question": "How do you add global CSS styles in a Next.js project?",
          "options": [
            "Import the CSS file in _app.js",
            "Add the CSS file to the public folder",
            "Use inline styles in components",
            "Import the CSS file directly in index.js"
          ],
          "answer": "Import the CSS file in _app.js"
        }
      ]
    },
    {
      "title": "TailwindCSS",
      "icon": "./assets/images/tailwindcss.svg",
      "questions": [
        {
          "id": 1,
          "question": "What is Tailwind CSS primarily used for?",
          "options": [
            "Backend development",
            "Utility-first CSS styling",
            "Database management",
            "Server-side rendering"
          ],
          "answer": "Utility-first CSS styling"
        },
        {
          "id": 2,
          "question": "How do you install Tailwind CSS in a project?",
          "options": [
            "npm install tailwind",
            "npm install tailwindcss",
            "npm install tailwind-css",
            "npm install tailwind-styles"
          ],
          "answer": "npm install tailwindcss"
        },
        {
          "id": 3,
          "question": "Which file is used to configure Tailwind CSS?",
          "options": [
            "tailwind.js",
            "tailwind.config.css",
            "tailwind.config.js",
            "tailwind-config.json"
          ],
          "answer": "tailwind.config.js"
        },
        {
          "id": 4,
          "question": "What is the purpose of the `@apply` directive in Tailwind CSS?",
          "options": [
            "To create custom animations",
            "To apply utility classes in custom CSS",
            "To import external stylesheets",
            "To define media queries"
          ],
          "answer": "To apply utility classes in custom CSS"
        },
        {
          "id": 5,
          "question": "Which utility class is used to set a flex container in Tailwind CSS?",
          "options": ["flexbox", "flex-container", "flex", "display-flex"],
          "answer": "flex"
        },
        {
          "id": 6,
          "question": "How do you add padding of 1rem to an element in Tailwind CSS?",
          "options": ["p-1", "p-4", "p-6", "p-8"],
          "answer": "p-4"
        },
        {
          "id": 7,
          "question": "Which utility class is used to center text horizontally in Tailwind CSS?",
          "options": [
            "text-center",
            "text-middle",
            "align-center",
            "center-text"
          ],
          "answer": "text-center"
        },
        {
          "id": 8,
          "question": "What is the purpose of the `purge` option in `tailwind.config.js`?",
          "options": [
            "To remove unused CSS in production",
            "To add custom colors",
            "To enable dark mode",
            "To configure animations"
          ],
          "answer": "To remove unused CSS in production"
        },
        {
          "id": 9,
          "question": "How do you enable dark mode in Tailwind CSS?",
          "options": [
            "Add `dark: true` in `tailwind.config.js`",
            "Use the `dark-mode` utility class",
            "Add `darkMode: 'class'` or `darkMode: 'media'` in `tailwind.config.js`",
            "Import a dark mode plugin"
          ],
          "answer": "Add `darkMode: 'class'` or `darkMode: 'media'` in `tailwind.config.js`"
        },
        {
          "id": 10,
          "question": "Which utility class is used to set a full-width container in Tailwind CSS?",
          "options": ["w-full", "container-full", "width-full", "full-width"],
          "answer": "w-full"
        }
      ]
    }
  ]
}
